[{"title":"Client/Server Strategy with SocketIO","meta":{"index":0,"fileName":"2017-10-04-ClientServerCommunicationSocketIO.md","section":"/","dirName":"/blog","filePath":"/Volumes/Code/personal-dev/blog/content/blog/2017-10-04-ClientServerCommunicationSocketIO.md"},"date":"2017-10-04","path":"/blog/blog/client-server-communication-socket-io","permalink":"/blog/client-server-communication-socket-io","anchors":[],"body":"<p>I’m currently creating a text-based browser MMO. I’m using SocketIO to facilitate the client-server communication, as opposed to the AJAX requests typically seen in this kind of game.</p>\n<p>I chose SocketIO in order to provide more functionality, like being able to see live what other players in your current location are doing, when players join / leave, and a robust chat system. All things not possible (or messy and slow at the very least) with AJAX.</p>\n<p>However, that meant setting up more complicated client-server communication due to the fact that it’s not request-based, but event-based logic.</p>\n<h3>Choosing My Tech</h3>\n<p>I decided to use <a href=\"https://vuejs.org/\">Vue</a> as the front-end of the project, as I’m using it at work and wanted to get some more experience with the framework. Plus it’s just a joy to use.</p>\n<p>With that in mind, I decided to go with <a href=\"https://nuxtjs.org/\">Nuxt</a> as my framework of choice. Nuxt allows you to build isomorphic (or universal, pick your fancy word) applications by letting the code be run on either the client or server side. Perfect for wanting to use SocketIO.</p>\n<p>Finally, I used <a href=\"https://nodejs.org/\">NodeJS</a> as the back-end. Since SocketIO is an event-driven technology anyway, Node seemed like the perfect fit. Plus I’ll be able to scale well and handle a large number of concurrent users. Perfect for an MMO.</p>\n<h3>The Workflow</h3>\n<p>Because this is a multiplayer game, it’s safe to assume that all players are cheaters. Because of this, the client’s <em>only</em> role is to handle state and present it to the user.</p>\n<p><strong>All logic happens server-side.</strong></p>\n<p>This means the client emits an event to the server, which handles all the logic and validation. The server then updates state in the database and emits an event back to the client. Finally the client updates its store and presents the data back to the player.</p>\n<p>Because we’re using SocketIO, this round trip is blazing fast and the player will feel like his actions are happening instantaneously. Something AJAX can’t do.</p>\n<p>So let’s get into the nitty-gritty.</p>\n<p>Here’s a diagram showing the workflow:</p>\n<div align=\"center\">\n<p><img src=\"/clientserverstrategy/workflow.png\" alt=\"Workflow\"></p>\n</div>\n<p>Let’s break it down.</p>\n<h4>The Component</h4>\n<p>This is an individual component on the client side. This could be a chat box, map element, or set of buttons presenting actions to the user.</p>\n<p>The component dispatches a Vuex action, like so:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Client-side Component</span>\n<span class=\"token comment\" spellcheck=\"true\">// This is called in the component template with @submit=\"sendMessage\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sendMessage <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> newChat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chat<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n        author<span class=\"token punctuation\">:</span> <span class=\"token string\">'You'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMessage\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chat/createMessage'</span><span class=\"token punctuation\">,</span> newChat<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMessage <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Each component only cares about assembling data and dispatching actions to the store. This keeps our component methods clean and readable.</p>\n<p>The component also gets its data from the Vuex store. This means we can set up grabbing the data once and then leave it. Great!</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Client-side Component</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  computed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    chats <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>chat<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h4>Vuex Store</h4>\n<p>This is where the meat of the client-side logic happens. While components only care about receiving and sending data, the store cares about updating state.</p>\n<p>All my store objects are namespaced into modules. This means all chat-related actions and mutations happen in <code>/store/chat.js</code>. This means I can also name my actions more freely. For example <code>$store.dispatch('chat/createMessage')</code> in the store is actually just <code>createMessage</code>, but in the <code>chat</code> namespace.</p>\n<p>More on this at the end of the post, but honestly I think this is a no-brainer if you expect your project to reach any sort of scale.</p>\n<p>So in the store’s chat module, we handle the action dispatched by the component:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Client-side /store/chat.js</span>\nactions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  createMessage <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> commit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'createMessage'</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Because actions are asynchronous, we could do a lot more in this action if we wanted to. Maybe we emit multiple events to the server. Or maybe we check the message for nasty language before processing it. Use your imagination.</p>\n<p>This pretty solidly future-proofs our actions so we can scale as much as we need.</p>\n<p><strong>So what’s next?</strong> The client has emitted an event via SocketIO to the server so let’s head over there and see what’s happening.</p>\n<hr>\n<h4>Server Store</h4>\n<p>Now this isn’t Vuex but it’s still separated by directory structure so that it acts the same way the client-side store does.</p>\n<p>In my <code>/sockets/chat.js</code> file, I can see all incoming events and then send out actions to my controllers.</p>\n<p>We don’t receive events directly on the controllers for the same reason we don’t emit events directly on components client-side. We want to make room for scale.</p>\n<p>So in the future, when we add a new feature (like private chat groups for example), we can simply add a controller method (or a whole new store/controller combo) to our <code>/sockets/chat.js</code> file and we’re good to go. No need to get spaghetti code everywhere in our controllers.</p>\n<p>So an example of server store:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Server-side /sockets/chat.js</span>\nchat<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  client<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'createMessage'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chat<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'broadcastMessage'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>In this case, we don’t use a controller yet, we’re just emitting the data right back to the client.</p>\n<p>But if we wanted to, we could:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Server-side /sockets/chat.js</span>\n<span class=\"token keyword\">const</span> ChatController <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/ChatController'</span><span class=\"token punctuation\">)</span>\n\nchat<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  client<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'createMessage'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> cleanText <span class=\"token operator\">=</span> ChatController<span class=\"token punctuation\">.</span><span class=\"token function\">noSwearing</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    chat<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'broadcastMessage'</span><span class=\"token punctuation\">,</span> cleanText<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Plus we could emit other events, call as many controller methods as we want, and generally just add logic willy-nilly without stressing too much. If it gets <em>too</em> crazy, just abstract some method calls into a single method.</p>\n<p>Plus doing it this way allows us to keep our code extremely readable and testable (yay!). You don’t need to look at the controller to know what it does.</p>\n<p>If you needed to do a DB lookup with the player’s data, you could just pass through the SocketIO object (which you attach the player ID to during authentication) and do all your logic straight from the method.</p>\n<p>Excellent.</p>\n<p>And really, that’s all you should ever need. Since we don’t trust the client, we are only receiving what the client <em>wants</em> to do. Then we do all our checking and the actual action on the server. So all you’ll ever need is intent and a player ID.</p>\n<hr>\n<h3>Back to the Vuex Store</h3>\n<p>Once the server does its logic, it will emit an event containing only the data the client needs to update.</p>\n<p>This gets pulled into the store on the client side:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Client-side /store/chat.js</span>\nio<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'broadcastMessage'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chat/createMessage'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>You can see that after we’ve received the event, we commit a mutation which changes the state. We’re also namespacing the commit, which we mentioned earlier and we’ll go into more depth in a second.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Client-side /store/chat.js</span>\nmutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  createMessage <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> chat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>chat<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      author<span class=\"token punctuation\">:</span> chat<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">:</span> chat<span class=\"token punctuation\">.</span>message\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This gets received by the component, which updates the view for the user. Full circle!</p>\n<p>Let’s dig a little bit deeper to see how exactly the store-to-store (client/server) communication works:</p>\n<hr>\n<h4>Keeping Things Clean</h4>\n<p>You may have noticed that we didn’t namespace our SocketIO events. “Won’t that get terribly messy?” you think…</p>\n<p>Well…technically we did.</p>\n<p>This is because they’re already namespaced.</p>\n<p>On the client-side we have our events namespaced automatically due to the namespacing of Vuex.</p>\n<p>On the server-side, we namespace our events by separating our logic into equivalently-named files under <code>/sockets/</code>.</p>\n<p>Let’s see:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Client-side directory structure</span>\n<span class=\"token operator\">-</span> <span class=\"token operator\">/</span>store\n  <span class=\"token operator\">-</span> index<span class=\"token punctuation\">.</span>js <span class=\"token comment\" spellcheck=\"true\">// Handles importing all the modules</span>\n  <span class=\"token operator\">-</span> chat<span class=\"token punctuation\">.</span>js\n  <span class=\"token operator\">-</span> map<span class=\"token punctuation\">.</span>js\n  <span class=\"token operator\">-</span> etc<span class=\"token punctuation\">.</span>js\n\n<span class=\"token comment\" spellcheck=\"true\">// Server-side directory structure</span>\n<span class=\"token operator\">-</span> <span class=\"token operator\">/</span>sockets\n  <span class=\"token operator\">-</span> index<span class=\"token punctuation\">.</span>js <span class=\"token comment\" spellcheck=\"true\">// Handles importing all the modules</span>\n  <span class=\"token operator\">-</span> chat<span class=\"token punctuation\">.</span>js\n  <span class=\"token operator\">-</span> map<span class=\"token punctuation\">.</span>js\n  <span class=\"token operator\">-</span> etc<span class=\"token punctuation\">.</span>js\n</code></pre>\n<p>Because of this matching, we can work confidently knowing that namespaces are equal across client and server and our event logic stays isolated. The way it should be.</p>\n<p>“But wait, you can’t just name files the same and expect things to just work?”</p>\n<p>Right you are.</p>\n<p>Let’s see what these <code>index.js</code> files look like.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Client-side /store/index.js</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n<span class=\"token keyword\">import</span> io <span class=\"token keyword\">from</span> <span class=\"token string\">'~/plugins/socket.io'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Import components</span>\n<span class=\"token keyword\">import</span> chatModule <span class=\"token keyword\">from</span> <span class=\"token string\">'./chat'</span>\n<span class=\"token keyword\">import</span> mapModule <span class=\"token keyword\">from</span> <span class=\"token string\">'./map'</span>\n<span class=\"token keyword\">import</span> authModule <span class=\"token keyword\">from</span> <span class=\"token string\">'./auth'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Set up the modules by passing them a namespaced SocketIO instance</span>\n<span class=\"token keyword\">const</span> chat <span class=\"token operator\">=</span> <span class=\"token function\">chatModule</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>chat<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token function\">mapModule</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> auth <span class=\"token operator\">=</span> <span class=\"token function\">authModule</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      chat<span class=\"token punctuation\">,</span>\n      map<span class=\"token punctuation\">,</span>\n      auth\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      chat<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">,</span>\n      map<span class=\"token punctuation\">.</span>io\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store\n</code></pre>\n<p>The code is clean, self-documenting and easily expandable.</p>\n<p>What about the server-side?</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Server-side /sockets/index.js</span>\n<span class=\"token keyword\">const</span> socketio <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'socket.io'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Get the modules</span>\n<span class=\"token keyword\">const</span> handleChat <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./chat'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> handleMap <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./map'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Export this as a module that can easily be called in our server's root index.js</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>listen <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> io <span class=\"token operator\">=</span> socketio<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Pass through the SocketIO object</span>\n  <span class=\"token function\">handleChat</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">handleMap</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>And then we add namespacing in each individual module:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\" spellcheck=\"true\">// Server-side /sockets/chat.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> chat <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/chat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// Set the namespace here</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Listen for events like normal</span>\n  chat<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'createMessage'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      chat<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'broadcastMessage'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Because we set things up this way, we have flexibility to add lots of new features without worrying about cluttering anything up.</p>\n<p>If we need, we can just throw some logic into its own module, match it up with the module on the client-side, and we’re done.</p>\n<p>It just works.</p>\n"},{"title":"Building a Component Library","meta":{"index":1,"fileName":"2017-06-26-BuildingComponentLibrary.md","section":"/","dirName":"/blog","filePath":"/Volumes/Code/personal-dev/blog/content/blog/2017-06-26-BuildingComponentLibrary.md"},"date":"2017-06-26","path":"/blog/blog/building-component-library","permalink":"/blog/building-component-library","anchors":[],"body":"<p>We’re starting a rewrite of our software here at DataJoe and that gives me the freedom to design our front-end systems the right way from the start.</p>\n<p>However, finding “the Right Way™” is difficult, because it doesn’t appear to exist.</p>\n<p>So in lieue of the Right Way™ I’m deciding to go with “the best way I currently know how”.</p>\n<p>That way is building a component library.</p>\n<p>If you’re in front-end development at all, you should really check out what the guys at Lonely Planet are <a href=\"http://engineering.lonelyplanet.com/2014/05/18/a-maintainable-styleguide.html\">doing</a>. While it might not be the Right Way™ it’s certainly the best I’ve seen thus far and seems to take a lot of best practices from back-end development and apply it to the front end.</p>\n<p>In short, their solution is to create an API of components. This API feeds all their applications as well as their style guide, so changing the API cascades across all their applications, as well as updating the living style guide.</p>\n<p>This is a beautiful approach, because there’s no more copying and pasting of code, and it allows for changes to be made in a clean way that doesn’t leave legacy code laying all over your app.</p>\n<p>So at DataJoe, we decided to build something pretty similar, but here is how we structured it.</p>\n<h3>What DataJoe is doing.</h3>\n<ul>\n<li>Pipette, our CSS and JavaScript library.</li>\n<li>Beaker, our component library (written in VueJS), that pulls from Pipette.</li>\n</ul>\n<p>Beaker then delivers a single ES Module JS file and a bundled CSS file that is required to be built into your app. This means you can use Webpack to do some tree-shaking and only build the JS that you need for your app. Nifty.</p>\n<p>The reason we broke it up into two libraries is because we wanted to make it difficult to change the underlying JS and CSS that feeds everything we build. We limit access to Pipette and make changes few and far between with lots of testing to ensure we’re not breaking anything.</p>\n<p>We let the rest of the team access Beaker, which also houses our style guide. This means that as you update components, you can see your changes live reload in the style guide and see if (and where) things are breaking.</p>\n<p>These are also housed in BitBucket, where they’re versioned appropriately so that updating Beaker doesn’t necessarily break your application that’s using it. You can stay on older versions if you want to.</p>\n<h3>Why It’s Great</h3>\n<p>Keeping the two libraries separate is great for separation of concerns (definitely a Good Thing™), as well as making sure the big changes to CSS and JS which have a widespread effect are kept in check.</p>\n<p>Keeping a wide range of components in Beaker is great because in the future, building an app will be extremely straightforward. Want a button?</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b-button</span><span class=\"token punctuation\">></span></span>Click Me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b-button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>Want that button to be big? Don’t worry, this is all documented in the style guide.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b-button</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>large<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Click Here!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b-button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>Should that button be different than the default $primary color set in your SASS?\nMaybe your <code>$success</code> color?</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b-button</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>large<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b-button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>It’s ridiculously easy.</p>\n<p>Want to use the click event to trigger something in your parent element? Don’t worry, Vue handles this to where when I click the button, it will send the full event (or just precisely what I want depending on the options given) to the parent element to do whatever it wants with.</p>\n<p>This is all totally decoupled. Meaning I can jam my buttons everywhere without fear of things breaking.</p>\n<p>It’s beautiful.</p>\n<h3>Closing Thoughts</h3>\n<p>I’m still developing Beaker (only the button component is currently written and working) but we’ll be using it soon for our new apps and I’m excited to see how much quicker it makes development.</p>\n<p>I’ll be sure to update as we continue to use this down the line, but I have confidence in it.</p>\n"},{"title":"Laravel Mix and Bootstrap 4's JavaScript","meta":{"index":2,"fileName":"2017-03-16-LaravelMixAndBootstrap4.md","section":"/","dirName":"/blog","filePath":"/Volumes/Code/personal-dev/blog/content/blog/2017-03-16-LaravelMixAndBootstrap4.md"},"date":"2017-03-16","path":"/blog/blog/laravel-mix-and-bootstrap4","permalink":"/blog/laravel-mix-and-bootstrap4","anchors":[],"body":"<p>It seems that getting Bootstrap 4 to play nicely with just about anything takes quite a bit of work. I felt like bashing my head into a brick wall several times during my work to try and get this functional. So I’m here to save your precious brain cells and just tell you what I did.</p>\n<p>Of course you can always grab everything you need from a CDN and slap it into your <code>index.html</code> but I wanted a modularized way of building out my assets. Because we’re embedding our application inside clients’ websites, we want it to be as lightweight as possible. So only pulling in exactly what we need is crucial.</p>\n<p>If you’re like me and don’t want to weigh down your application unnecessarily, this is what you’re looking for.</p>\n<p>First, you’re going to want:</p>\n<ul>\n<li>Laravel Mix, specifically your webpack.mix.js file. If you have Laravel 5.4, this should be right in your project root directory.</li>\n<li>Bootstrap 4 &amp; Tether installed. <code>npm i --save-dev bootstrap@4.0.0-alpha.6 tether</code></li>\n<li>For the <code>exports-loader</code> command, you’ll need Bootstrap Loader. <code>npm i --save-dev bootstrap-loader</code>. This isn’t <em>officially</em> supported for Bootstrap 4, but it works fine.</li>\n</ul>\n<p>This is literally my <code>webpack.mix.js</code> from the project I’m working on at work, with the custom stuff we have stripped out.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// webpack.mix.js</span>\nmix  \n  <span class=\"token punctuation\">.</span><span class=\"token function\">autoload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    jquery<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jQuery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'window.jQuery'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    tether<span class=\"token punctuation\">:</span> <span class=\"token string\">'Tether'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// This nasty little syntax is necessary based on the way Boostrap is packaged.</span>\n    <span class=\"token string\">'exports-loader?Util!bootstrap/js/dist/util'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Util'</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// All bootstrap dependencies.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Bootstrap isn't clear what you need, so when you add something, check console for errors.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// It'll tell you what you need.</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Alert!bootstrap/js/dist/alert\": 'Alert',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Button!bootstrap/js/dist/button\": 'Button',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Carousel!bootstrap/js/dist/carousel\": 'Carousel',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Collapse!bootstrap/js/dist/collapse\": 'Collapse',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Dropdown!bootstrap/js/dist/dropdown\": 'Dropdown',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Modal!bootstrap/js/dist/modal\": 'Modal',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Popover!bootstrap/js/dist/popover\": 'Popover',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Scrollspy!bootstrap/js/dist/scrollspy\": 'Scrollspy',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Tab!bootstrap/js/dist/tab\": 'Tab',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Tooltip!bootstrap/js/dist/tooltip\": 'Tooltip',</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  \"exports-loader?Util!bootstrap/js/dist/util\": 'Util'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token comment\" spellcheck=\"true\">// This is Laravel's bootstrap file.</span>\n    <span class=\"token string\">'resources/assets/js/bootstrap.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// This is all we're including from Bootstrap's JS.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Feel free to include whatever else you want, along with the appropriate dependencies.</span>\n    <span class=\"token string\">'bootstrap/js/dist/dropdown.js'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'public/js/all.js'</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>The reason this took me so long to figure out is because the way Laravel Mix uses <code>.autoload</code> is <em>backwards</em> from the typical Webpack configuration.</p>\n<p>Whether this is a design decision or oversight, it sure caused me a few hours of pain.</p>\n<h4>Webpack ProvidePlugin</h4>\n<p>Here, the package names are on the right, and the variable name is on the left.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ProvidePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n    jQuery<span class=\"token punctuation\">:</span> <span class=\"token string\">'jquery'</span><span class=\"token punctuation\">,</span>\n    $<span class=\"token punctuation\">:</span> <span class=\"token string\">'jquery'</span><span class=\"token punctuation\">,</span>\n    jquery<span class=\"token punctuation\">:</span> <span class=\"token string\">'jquery'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<h4>Laravel Mix Autoload</h4>\n<p>Here, the package name is on the left, and variable names are on the right.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">autoload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n    jquery<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jQuery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'window.jQuery'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    tether<span class=\"token punctuation\">:</span> <span class=\"token string\">'Tether'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'exports-loader?Util!bootstrap/js/dist/util'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Util'</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>This isn’t documented in the Laravel docs, just in the <a href=\"https://github.com/JeffreyWay/laravel-mix/blob/master/docs/autoloading.md\">Mix wiki on GitHub</a>. and doesn’t give an error when trying to run webpack, so it took a lot of tracking down to get this figured out.</p>\n<p>But alas, here it is! So stick this into your project and enjoy!</p>\n"},{"title":"Building Modular Pages in Laravel 5","meta":{"index":3,"fileName":"2017-02-03-BuildingPagesWithModularizedControllers.md","section":"/","dirName":"/blog","filePath":"/Volumes/Code/personal-dev/blog/content/blog/2017-02-03-BuildingPagesWithModularizedControllers.md"},"date":"2017-02-03","path":"/blog/blog/building-pages-with-modularized-controllers","permalink":"/blog/building-pages-with-modularized-controllers","anchors":[],"body":"<p>I’m building a Laravel web app that utilizes various components to make up a page. I also want to let users build their own pages down the line, so there needs to be a way for a page controller to be built out utilizing various components.</p>\n<p>However, each component can be reused on multiple pages, and some components have complex logic associated with them, so it makes the most sense to have them in their own controllers.</p>\n<p>To solve this problem, we simply call the component controllers from inside the page controller to get built out.</p>\n<p>Here is an example of the page controller that will build the page based on the predefined components of <code>ProjectListController</code> and <code>SearchBoxController</code>.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>  \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        $projectList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProjectListController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        $searchBox <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchBoxController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insights::index\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">'projectList'</span><span class=\"token punctuation\">,</span> $projectList<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">'searchBox'</span><span class=\"token punctuation\">,</span> $searchBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The <code>index()</code> method in the component controller returns the view, making each component fully self-contained.</p>\n<p>So far this has worked flawlessly, and there haven’t been any issues!</p>\n"},{"title":"Bootstrap 4 with Laravel 5 using Gulp","meta":{"index":4,"fileName":"2016-12-09-BootstrapWithLaravel.md","section":"/","dirName":"/blog","filePath":"/Volumes/Code/personal-dev/blog/content/blog/2016-12-09-BootstrapWithLaravel.md"},"date":"2016-12-09","path":"/blog/blog/bootstrap-with-laravel","permalink":"/blog/bootstrap-with-laravel","anchors":[],"body":"<p>My team is starting a new project, and we’ve decided to go with Laravel 5 as our framework of choice.</p>\n<p>We’ve also decided to go with Bootstrap 4, which at the time of this writing, is in Alpha.</p>\n<p>While it would be straightforward to just copy+paste the CDN or manually grab the minified CSS, I wanted a bit of a challenge. Plus the ability to easily <code>npm update</code> without having to manually do anything is a big plus.</p>\n<p>To get things up and running, there wasn’t a lot of documentation so I found bits and pieces here and there. Hopefully by me doing the research, you can get it all in one nice place.</p>\n<h2>What You Need</h2>\n<ul>\n<li>NPM</li>\n<li>Gulp (or your favorite build system)</li>\n<li>Laravel 5 already up and running (I’m on 5.3)</li>\n</ul>\n<h2>The Gist</h2>\n<ol>\n<li>Install Bootstrap via NPM</li>\n<li>Set up your gulpfile.js to build your CSS\nmix.sass(’…/…/…/node_modules/bootstrap/scss/bootstrap.scss’)</li>\n<li>Include your CSS in your layout</li>\n</ol>\n<h3>#1 - Get Bootstrap</h3>\n<p>If you already have NPM installed, this should be easy as going into your project directory and:</p>\n<p><code>npm install bootstrap@4.0.0-alpha.5</code></p>\n<p>…or whatever version of bootstrap it is you’re trying to get.</p>\n<p>For those of you a bit unfamiliar with <code>npm</code>, this will give you a <code>node_modules</code> directory where all your packages will live.</p>\n<p>This is where we’ll find Bootstrap later for Gulp to mess with.</p>\n<h3>#2 - Set Up Your Gulpfile</h3>\n<p>If you’re using Laravel, you should know what <a href=\"https://laravel.com/docs/5.3/elixir\">Elixir</a> is.</p>\n<p>So your <code>gulpfile.js</code> should look something like:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> elixir <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laravel-elixir'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">elixir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>mix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    mix<span class=\"token punctuation\">.</span><span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../../../node_modules/bootstrap/scss/bootstrap.scss'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Once you run <code>gulp</code> from your terminal, this will spit out the <code>bootstrap.css</code> file into your <code>public/css</code> directory. Laravel is already familiar with this, so don’t worry about it too much.</p>\n<p>I feel like there should be a more elegant way to grab things out of <code>node_modules</code> but everywhere I looked at the time of writing said this was the way to go. If anyone knows a better way, I’m open!</p>\n<h3>#3 - Include Your CSS</h3>\n<p>For my project, I have a <code>layout.blade.php</code> blade template where I have my boilerplate code, and that’s where I put the stylesheet references. While this may vary depending on your project, I would recommend this practice as it keeps things tidy.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">elixir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"css/bootstrap.css\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\">\n</code></pre>\n<p>That’s all there is to it! This will continue to work if you include some <a href=\"https://laravel.com/docs/5.3/elixir#versioning-and-cache-busting\">cache-busting</a> into your project, which I would highly recommend if not solely for the cool-factor.</p>\n<hr>\n<p>So there you have it! All-in-all it’s pretty straightforward, and if you’ve used these tools before, it gets even easier.</p>\n<p>But for someone who’s relatively new to all this, tackling this and getting it all to work right took longer than I’d care to admit on the internet.</p>\n"}]