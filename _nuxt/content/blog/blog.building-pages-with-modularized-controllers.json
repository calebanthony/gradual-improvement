{"title":"Building Modular Pages in Laravel 5","meta":{"index":3,"fileName":"2017-02-03-BuildingPagesWithModularizedControllers.md","section":"/","dirName":"/blog","filePath":"/Volumes/Code/personal-dev/blog/content/blog/2017-02-03-BuildingPagesWithModularizedControllers.md"},"date":"2017-02-03","path":"/blog/blog/building-pages-with-modularized-controllers","permalink":"/blog/building-pages-with-modularized-controllers","anchors":[],"body":"<p>I’m building a Laravel web app that utilizes various components to make up a page. I also want to let users build their own pages down the line, so there needs to be a way for a page controller to be built out utilizing various components.</p>\n<p>However, each component can be reused on multiple pages, and some components have complex logic associated with them, so it makes the most sense to have them in their own controllers.</p>\n<p>To solve this problem, we simply call the component controllers from inside the page controller to get built out.</p>\n<p>Here is an example of the page controller that will build the page based on the predefined components of <code>ProjectListController</code> and <code>SearchBoxController</code>.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>  \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        $projectList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProjectListController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        $searchBox <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchBoxController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insights::index\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">'projectList'</span><span class=\"token punctuation\">,</span> $projectList<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">'searchBox'</span><span class=\"token punctuation\">,</span> $searchBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The <code>index()</code> method in the component controller returns the view, making each component fully self-contained.</p>\n<p>So far this has worked flawlessly, and there haven’t been any issues!</p>\n"}