{"title":"Bootstrap 4 with Laravel 5 using Gulp","meta":{"index":4,"fileName":"2016-12-09-BootstrapWithLaravel.md","section":"/","dirName":"/blog","filePath":"/Volumes/Code/personal-dev/blog/content/blog/2016-12-09-BootstrapWithLaravel.md"},"date":"2016-12-09","path":"/blog/blog/bootstrap-with-laravel","permalink":"/blog/bootstrap-with-laravel","anchors":[],"body":"<p>My team is starting a new project, and we’ve decided to go with Laravel 5 as our framework of choice.</p>\n<p>We’ve also decided to go with Bootstrap 4, which at the time of this writing, is in Alpha.</p>\n<p>While it would be straightforward to just copy+paste the CDN or manually grab the minified CSS, I wanted a bit of a challenge. Plus the ability to easily <code>npm update</code> without having to manually do anything is a big plus.</p>\n<p>To get things up and running, there wasn’t a lot of documentation so I found bits and pieces here and there. Hopefully by me doing the research, you can get it all in one nice place.</p>\n<h2>What You Need</h2>\n<ul>\n<li>NPM</li>\n<li>Gulp (or your favorite build system)</li>\n<li>Laravel 5 already up and running (I’m on 5.3)</li>\n</ul>\n<h2>The Gist</h2>\n<ol>\n<li>Install Bootstrap via NPM</li>\n<li>Set up your gulpfile.js to build your CSS\nmix.sass(’…/…/…/node_modules/bootstrap/scss/bootstrap.scss’)</li>\n<li>Include your CSS in your layout</li>\n</ol>\n<h3>#1 - Get Bootstrap</h3>\n<p>If you already have NPM installed, this should be easy as going into your project directory and:</p>\n<p><code>npm install bootstrap@4.0.0-alpha.5</code></p>\n<p>…or whatever version of bootstrap it is you’re trying to get.</p>\n<p>For those of you a bit unfamiliar with <code>npm</code>, this will give you a <code>node_modules</code> directory where all your packages will live.</p>\n<p>This is where we’ll find Bootstrap later for Gulp to mess with.</p>\n<h3>#2 - Set Up Your Gulpfile</h3>\n<p>If you’re using Laravel, you should know what <a href=\"https://laravel.com/docs/5.3/elixir\">Elixir</a> is.</p>\n<p>So your <code>gulpfile.js</code> should look something like:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> elixir <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laravel-elixir'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">elixir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>mix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    mix<span class=\"token punctuation\">.</span><span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../../../node_modules/bootstrap/scss/bootstrap.scss'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Once you run <code>gulp</code> from your terminal, this will spit out the <code>bootstrap.css</code> file into your <code>public/css</code> directory. Laravel is already familiar with this, so don’t worry about it too much.</p>\n<p>I feel like there should be a more elegant way to grab things out of <code>node_modules</code> but everywhere I looked at the time of writing said this was the way to go. If anyone knows a better way, I’m open!</p>\n<h3>#3 - Include Your CSS</h3>\n<p>For my project, I have a <code>layout.blade.php</code> blade template where I have my boilerplate code, and that’s where I put the stylesheet references. While this may vary depending on your project, I would recommend this practice as it keeps things tidy.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">elixir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"css/bootstrap.css\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\">\n</code></pre>\n<p>That’s all there is to it! This will continue to work if you include some <a href=\"https://laravel.com/docs/5.3/elixir#versioning-and-cache-busting\">cache-busting</a> into your project, which I would highly recommend if not solely for the cool-factor.</p>\n<hr>\n<p>So there you have it! All-in-all it’s pretty straightforward, and if you’ve used these tools before, it gets even easier.</p>\n<p>But for someone who’s relatively new to all this, tackling this and getting it all to work right took longer than I’d care to admit on the internet.</p>\n"}